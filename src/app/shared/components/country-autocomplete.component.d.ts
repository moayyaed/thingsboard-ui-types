import { ElementRef, EventEmitter, OnInit } from '@angular/core';
import { Country, CountryData } from '@shared/models/country.models';
import { ControlValueAccessor, FormBuilder, FormGroup, ValidationErrors, Validator } from '@angular/forms';
import { Observable } from 'rxjs';
import { SubscriptSizing, MatFormFieldAppearance } from '@angular/material/form-field';
import { TranslateService } from '@ngx-translate/core';
import * as i0 from "@angular/core";
export declare class CountryAutocompleteComponent implements OnInit, ControlValueAccessor, Validator {
    private fb;
    private countryData;
    private translate;
    labelText: any;
    requiredText: any;
    autocompleteHint: string;
    disabled: boolean;
    required: boolean;
    appearance: MatFormFieldAppearance;
    subscriptSizing: SubscriptSizing;
    countryInput: ElementRef;
    selectCountryCode: EventEmitter<string>;
    countryFormGroup: FormGroup;
    searchText: string;
    filteredCountries: Observable<Array<Country>>;
    onTouched: () => void;
    private propagateChange;
    private modelValue;
    private allCountries;
    private initSearchData;
    private dirty;
    constructor(fb: FormBuilder, countryData: CountryData, translate: TranslateService);
    ngOnInit(): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    validate(): ValidationErrors | null;
    writeValue(country: string): void;
    displayCountryFn(country?: Country): string | undefined;
    onFocus(): void;
    textIsNotEmpty(text: string): boolean;
    clear(): void;
    private fetchCountries;
    private updateView;
    static ɵfac: i0.ɵɵFactoryDeclaration<CountryAutocompleteComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<CountryAutocompleteComponent, "tb-country-autocomplete", never, { "labelText": { "alias": "labelText"; "required": false; }; "requiredText": { "alias": "requiredText"; "required": false; }; "autocompleteHint": { "alias": "autocompleteHint"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "required": { "alias": "required"; "required": false; }; "appearance": { "alias": "appearance"; "required": false; }; "subscriptSizing": { "alias": "subscriptSizing"; "required": false; }; }, { "selectCountryCode": "selectCountryCode"; }, never, never, false, never>;
}

import { ChangeDetectorRef, OnDestroy, OnInit, Renderer2, ViewContainerRef } from '@angular/core';
import { AggregationType, HistoryWindowType, Interval, RealtimeWindowType, Timewindow, TimewindowType } from '@shared/models/time/time.models';
import { PageComponent } from '@shared/components/page.component';
import { Store } from '@ngrx/store';
import { AppState } from '@core/core.state';
import { FormBuilder, FormGroup } from '@angular/forms';
import { TimeService } from '@core/services/time.service';
import { ToggleHeaderOption } from '@shared/components/toggle-header.component';
import { TranslateService } from '@ngx-translate/core';
import { MatDialogRef } from '@angular/material/dialog';
import { TbPopoverService } from '@shared/components/popover.service';
import * as i0 from "@angular/core";
export interface TimewindowConfigDialogData {
    quickIntervalOnly: boolean;
    aggregation: boolean;
    timewindow: Timewindow;
}
export declare class TimewindowConfigDialogComponent extends PageComponent implements OnInit, OnDestroy {
    data: TimewindowConfigDialogData;
    dialogRef: MatDialogRef<TimewindowConfigDialogComponent, Timewindow>;
    protected store: Store<AppState>;
    fb: FormBuilder;
    private timeService;
    private translate;
    private popoverService;
    private renderer;
    private cd;
    viewContainerRef: ViewContainerRef;
    quickIntervalOnly: boolean;
    aggregation: boolean;
    timewindowForm: FormGroup;
    historyTypes: typeof HistoryWindowType;
    realtimeTypes: typeof RealtimeWindowType;
    timewindowTypes: typeof TimewindowType;
    aggregationTypes: typeof AggregationType;
    result: Timewindow;
    timewindowTypeOptions: ToggleHeaderOption[];
    realtimeTimewindowOptions: ToggleHeaderOption[];
    historyTimewindowOptions: ToggleHeaderOption[];
    realtimeTypeSelectionAvailable: boolean;
    private timewindow;
    private destroy$;
    constructor(data: TimewindowConfigDialogData, dialogRef: MatDialogRef<TimewindowConfigDialogComponent, Timewindow>, store: Store<AppState>, fb: FormBuilder, timeService: TimeService, translate: TranslateService, popoverService: TbPopoverService, renderer: Renderer2, cd: ChangeDetectorRef, viewContainerRef: ViewContainerRef);
    ngOnInit(): void;
    ngOnDestroy(): void;
    private updateDisableAdvancedOptionState;
    private updateValidators;
    private onTimewindowTypeChange;
    update(): void;
    cancel(): void;
    get minRealtimeAggInterval(): number;
    get maxRealtimeAggInterval(): number;
    private currentRealtimeTimewindow;
    get minHistoryAggInterval(): number;
    get maxHistoryAggInterval(): number;
    private currentHistoryTimewindow;
    get realtimeAllowedAggIntervals(): Array<Interval>;
    get historyAllowedAggIntervals(): Array<Interval>;
    openAggregationOptionsConfig($event: Event): void;
    configureRealtimeLastIntervalOptions($event: Event): void;
    configureRealtimeQuickIntervalOptions($event: Event): void;
    configureHistoryLastIntervalOptions($event: Event): void;
    configureHistoryQuickIntervalOptions($event: Event): void;
    private openIntervalOptionsConfig;
    static ɵfac: i0.ɵɵFactoryDeclaration<TimewindowConfigDialogComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TimewindowConfigDialogComponent, "tb-timewindow-config-dialog", never, {}, {}, never, never, false, never>;
}

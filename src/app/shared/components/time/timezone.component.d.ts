import { ChangeDetectorRef, OnInit, Renderer2, ViewContainerRef } from '@angular/core';
import { ControlValueAccessor } from '@angular/forms';
import { TranslateService } from '@ngx-translate/core';
import { TooltipPosition } from '@angular/material/tooltip';
import { TbPopoverService } from '@shared/components/popover.service';
import { TimezoneInfo } from '@shared/models/time/time.models';
import { TimeService } from '@core/services/time.service';
import * as i0 from "@angular/core";
export declare class TimezoneComponent implements ControlValueAccessor, OnInit {
    private translate;
    private cd;
    viewContainerRef: ViewContainerRef;
    private popoverService;
    private renderer;
    private timeService;
    noMargin: boolean;
    noPadding: boolean;
    disablePanel: boolean;
    asButton: boolean;
    strokedButton: boolean;
    flatButton: boolean;
    displayTimezoneValue: boolean;
    hideLabel: boolean;
    tooltipPosition: TooltipPosition;
    disabled: boolean;
    private userTimezoneByDefaultValue;
    get userTimezoneByDefault(): boolean;
    set userTimezoneByDefault(value: boolean);
    private localBrowserTimezonePlaceholderOnEmptyValue;
    get localBrowserTimezonePlaceholderOnEmpty(): boolean;
    set localBrowserTimezonePlaceholderOnEmpty(value: boolean);
    defaultTimezoneId: string;
    set defaultTimezone(timezone: string);
    private requiredValue;
    get required(): boolean;
    set required(value: boolean);
    modelValue: string | null;
    timezoneInfo: TimezoneInfo;
    private localBrowserTimezoneInfoPlaceholder;
    timezoneDisabled: boolean;
    private propagateChange;
    constructor(translate: TranslateService, cd: ChangeDetectorRef, viewContainerRef: ViewContainerRef, popoverService: TbPopoverService, renderer: Renderer2, timeService: TimeService);
    ngOnInit(): void;
    toggleTimezone($event: Event): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    writeValue(value: string | null): void;
    notifyChanged(): void;
    displayValue(): string;
    tooltipValue(): string;
    updateDisplayValue(): void;
    private isTimezoneDisabled;
    private setTimezoneInfo;
    static ɵfac: i0.ɵɵFactoryDeclaration<TimezoneComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TimezoneComponent, "tb-timezone", never, { "noMargin": { "alias": "noMargin"; "required": false; }; "noPadding": { "alias": "noPadding"; "required": false; }; "disablePanel": { "alias": "disablePanel"; "required": false; }; "asButton": { "alias": "asButton"; "required": false; }; "strokedButton": { "alias": "strokedButton"; "required": false; }; "flatButton": { "alias": "flatButton"; "required": false; }; "displayTimezoneValue": { "alias": "displayTimezoneValue"; "required": false; }; "hideLabel": { "alias": "hideLabel"; "required": false; }; "tooltipPosition": { "alias": "tooltipPosition"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "userTimezoneByDefault": { "alias": "userTimezoneByDefault"; "required": false; }; "localBrowserTimezonePlaceholderOnEmpty": { "alias": "localBrowserTimezonePlaceholderOnEmpty"; "required": false; }; "defaultTimezone": { "alias": "defaultTimezone"; "required": false; }; "required": { "alias": "required"; "required": false; }; }, {}, never, never, false, never>;
}

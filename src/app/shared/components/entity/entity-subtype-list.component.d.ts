import { AfterViewInit, ElementRef, OnDestroy, OnInit } from '@angular/core';
import { ControlValueAccessor, FormBuilder, FormGroup } from '@angular/forms';
import { Observable } from 'rxjs';
import { TranslateService } from '@ngx-translate/core';
import { EntityType } from '@shared/models/entity-type.models';
import { MatAutocomplete, MatAutocompleteSelectedEvent } from '@angular/material/autocomplete';
import { MatChipGrid, MatChipInputEvent } from '@angular/material/chips';
import { BroadcastService } from '@core/services/broadcast.service';
import { AlarmService } from '@core/http/alarm.service';
import { FloatLabelType, MatFormFieldAppearance, SubscriptSizing } from '@angular/material/form-field';
import { UtilsService } from '@core/services/utils.service';
import { EntityService } from '@core/http/entity.service';
import * as i0 from "@angular/core";
export declare class EntitySubTypeListComponent implements ControlValueAccessor, OnInit, AfterViewInit, OnDestroy {
    private broadcast;
    translate: TranslateService;
    private alarmService;
    private utils;
    private fb;
    private entityService;
    entitySubtypeListFormGroup: FormGroup;
    modelValue: Array<string> | null;
    private requiredValue;
    get required(): boolean;
    set required(value: boolean);
    floatLabel: FloatLabelType;
    label: string;
    disabled: boolean;
    entityType: EntityType;
    emptyInputPlaceholder: string;
    filledInputPlaceholder: string;
    appearance: MatFormFieldAppearance;
    subscriptSizing: SubscriptSizing;
    additionalClasses: Array<string>;
    entitySubtypeInput: ElementRef<HTMLInputElement>;
    entitySubtypeAutocomplete: MatAutocomplete;
    chipList: MatChipGrid;
    entitySubtypeList: Array<string>;
    filteredEntitySubtypeList: Observable<Array<string>>;
    private entitySubtypes;
    private broadcastSubscription;
    placeholder: string;
    secondaryPlaceholder: string;
    noSubtypesMathingText: string;
    subtypeListEmptyText: string;
    separatorKeysCodes: number[];
    searchText: string;
    private dirty;
    private propagateChange;
    private hasPageDataEntitySubTypes;
    constructor(broadcast: BroadcastService, translate: TranslateService, alarmService: AlarmService, utils: UtilsService, fb: FormBuilder, entityService: EntityService);
    updateValidators(): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    setDisabledState(isDisabled: boolean): void;
    writeValue(value: Array<string> | null): void;
    private add;
    chipAdd(event: MatChipInputEvent): void;
    addOnBlur(event: FocusEvent): void;
    remove(entitySubtype: string): void;
    selected(event: MatAutocompleteSelectedEvent): void;
    displayEntitySubtypeFn(entitySubtype?: string): string | undefined;
    private fetchEntitySubtypes;
    private getEntitySubtypes;
    onFocus(): void;
    clear(value?: string): void;
    customTranslate(entity: string): string;
    static ɵfac: i0.ɵɵFactoryDeclaration<EntitySubTypeListComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<EntitySubTypeListComponent, "tb-entity-subtype-list", never, { "required": { "alias": "required"; "required": false; }; "floatLabel": { "alias": "floatLabel"; "required": false; }; "label": { "alias": "label"; "required": false; }; "disabled": { "alias": "disabled"; "required": false; }; "entityType": { "alias": "entityType"; "required": false; }; "emptyInputPlaceholder": { "alias": "emptyInputPlaceholder"; "required": false; }; "filledInputPlaceholder": { "alias": "filledInputPlaceholder"; "required": false; }; "appearance": { "alias": "appearance"; "required": false; }; "subscriptSizing": { "alias": "subscriptSizing"; "required": false; }; "additionalClasses": { "alias": "additionalClasses"; "required": false; }; }, {}, never, ["[matSuffix]"], false, never>;
}

import { OnDestroy, Renderer2, ViewContainerRef } from '@angular/core';
import { MatDialogRef } from '@angular/material/dialog';
import { Store } from '@ngrx/store';
import { AppState } from '@core/core.state';
import { FormBuilder, UntypedFormGroup } from '@angular/forms';
import { DialogComponent } from '@shared/components/dialog.component';
import { Router } from '@angular/router';
import { ConnectorMapping, ConvertorType, DeviceInfoType, MappingInfo, MappingKeysType, MappingType, OPCUaSourceType, RequestType, ServerSideRPCType, SourceType } from '@home/components/widget/lib/gateway/gateway-widget.models';
import { MatButton } from '@angular/material/button';
import { TbPopoverService } from '@shared/components/popover.service';
import { TranslateService } from '@ngx-translate/core';
import * as i0 from "@angular/core";
export declare class MappingDialogComponent extends DialogComponent<MappingDialogComponent, ConnectorMapping> implements OnDestroy {
    protected store: Store<AppState>;
    protected router: Router;
    data: MappingInfo;
    dialogRef: MatDialogRef<MappingDialogComponent, ConnectorMapping>;
    private fb;
    private popoverService;
    private renderer;
    private viewContainerRef;
    private translate;
    mappingForm: UntypedFormGroup;
    MappingType: typeof MappingType;
    qualityTypes: number[];
    QualityTranslationsMap: Map<number, string>;
    convertorTypes: ConvertorType[];
    ConvertorTypeEnum: typeof ConvertorType;
    ConvertorTypeTranslationsMap: Map<ConvertorType, string>;
    sourceTypes: SourceType[];
    OPCUaSourceTypes: OPCUaSourceType[];
    OPCUaSourceTypesEnum: typeof OPCUaSourceType;
    sourceTypesEnum: typeof SourceType;
    SourceTypeTranslationsMap: Map<SourceType | OPCUaSourceType, string>;
    requestTypes: RequestType[];
    RequestTypeEnum: typeof RequestType;
    RequestTypesTranslationsMap: Map<RequestType, string>;
    DeviceInfoType: typeof DeviceInfoType;
    ServerSideRPCType: typeof ServerSideRPCType;
    MappingKeysType: typeof MappingKeysType;
    MappingHintTranslationsMap: Map<MappingType, string>;
    MappingTypeTranslationsMap: Map<MappingType, string>;
    DataConversionTranslationsMap: Map<ConvertorType, string>;
    HelpLinkByMappingTypeMap: Map<MappingType, string>;
    keysPopupClosed: boolean;
    private destroy$;
    constructor(store: Store<AppState>, router: Router, data: MappingInfo, dialogRef: MatDialogRef<MappingDialogComponent, ConnectorMapping>, fb: FormBuilder, popoverService: TbPopoverService, renderer: Renderer2, viewContainerRef: ViewContainerRef, translate: TranslateService);
    get converterAttributes(): Array<string>;
    get converterTelemetry(): Array<string>;
    get opcAttributes(): Array<string>;
    get opcTelemetry(): Array<string>;
    get opcRpcMethods(): Array<string>;
    get opcAttributesUpdates(): Array<string>;
    get converterType(): ConvertorType;
    get customKeys(): Array<string>;
    get requestMappingType(): RequestType;
    get responseTimeoutErrorTooltip(): string;
    ngOnDestroy(): void;
    private createMappingForm;
    cancel(): void;
    add(): void;
    manageKeys($event: Event, matButton: MatButton, keysType: MappingKeysType): void;
    private prepareMappingData;
    private getFormValueData;
    private createDataMappingForm;
    private createRequestMappingForm;
    private createOPCUAMappingForm;
    static ɵfac: i0.ɵɵFactoryDeclaration<MappingDialogComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<MappingDialogComponent, "tb-mapping-dialog", never, {}, {}, never, never, false, never>;
}

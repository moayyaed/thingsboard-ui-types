import { EventEmitter, OnInit } from '@angular/core';
import { ControlValueAccessor, FormBuilder, FormControl, FormGroup } from '@angular/forms';
import { BACnetObjectTypes, BACnetRequestTypes, BLEMethods, CANByteOrders, ConnectorType, HTTPMethods, ModbusCommandTypes, RPCCommand, RPCTemplateConfig, SNMPMethods, SocketEncodings, SocketMethodProcessings } from '@home/components/widget/lib/gateway/gateway-widget.models';
import { MatDialog } from '@angular/material/dialog';
import * as i0 from "@angular/core";
export declare class GatewayServiceRPCConnectorComponent implements OnInit, ControlValueAccessor {
    private fb;
    private dialog;
    connectorType: ConnectorType;
    sendCommand: EventEmitter<RPCCommand>;
    saveTemplate: EventEmitter<RPCTemplateConfig>;
    commandForm: FormGroup;
    isMQTTWithResponse: FormControl;
    codesArray: Array<number>;
    ConnectorType: typeof ConnectorType;
    modbusCommandTypes: ModbusCommandTypes[];
    bACnetRequestTypes: BACnetRequestTypes[];
    bACnetObjectTypes: BACnetObjectTypes[];
    bLEMethods: BLEMethods[];
    cANByteOrders: CANByteOrders[];
    socketMethodProcessings: SocketMethodProcessings[];
    socketEncodings: SocketEncodings[];
    sNMPMethods: SNMPMethods[];
    hTTPMethods: HTTPMethods[];
    bACnetRequestTypesTranslates: Map<BACnetRequestTypes, string>;
    bACnetObjectTypesTranslates: Map<BACnetObjectTypes, string>;
    bLEMethodsTranslates: Map<BLEMethods, string>;
    SocketMethodProcessingsTranslates: Map<SocketMethodProcessings, string>;
    SNMPMethodsTranslations: Map<SNMPMethods, string>;
    gatewayConnectorDefaultTypesTranslates: Map<ConnectorType, string>;
    modbusCodesTranslate: Map<number, string>;
    urlPattern: RegExp;
    numbersOnlyPattern: RegExp;
    hexOnlyPattern: RegExp;
    private propagateChange;
    constructor(fb: FormBuilder, dialog: MatDialog);
    ngOnInit(): void;
    connectorParamsFormGroupByType(type: ConnectorType): FormGroup;
    addSNMPoid(value?: string): void;
    removeSNMPoid(index: number): void;
    addHTTPHeader(value?: {
        headerName: string;
        value: string;
    }): void;
    removeHTTPHeader(index: number): void;
    addHTTPSecurity(value?: {
        securityName: string;
        value: string;
    }): void;
    removeHTTPSecurity(index: number): void;
    getFormArrayControls(path: string): FormControl<any>[];
    addOCPUAArguments(value?: string): void;
    removeOCPUAArguments(index: number): void;
    openEditJSONDialog($event: Event): void;
    save(): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    clearFromArrayByName(name: string): void;
    writeValue(value: RPCTemplateConfig): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<GatewayServiceRPCConnectorComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<GatewayServiceRPCConnectorComponent, "tb-gateway-service-rpc-connector", never, { "connectorType": "connectorType"; }, { "sendCommand": "sendCommand"; "saveTemplate": "saveTemplate"; }, never, never, false, never>;
}

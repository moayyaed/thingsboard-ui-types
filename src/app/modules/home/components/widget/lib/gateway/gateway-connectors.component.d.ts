import { AfterViewInit, ChangeDetectorRef, ElementRef, NgZone, OnDestroy } from '@angular/core';
import { Store } from '@ngrx/store';
import { AppState } from '@core/core.state';
import { FormBuilder, FormControl, FormGroup, ValidatorFn } from '@angular/forms';
import { EntityId } from '@shared/models/id/entity-id';
import { AttributeService } from '@core/http/attribute.service';
import { TranslateService } from '@ngx-translate/core';
import { Subject } from 'rxjs';
import { PageComponent } from '@shared/components/page.component';
import { PageLink } from '@shared/models/page/page-link';
import { MatSort } from '@angular/material/sort';
import { TelemetryWebsocketService } from '@core/ws/telemetry-websocket.service';
import { MatTableDataSource } from '@angular/material/table';
import { DialogService } from '@core/services/dialog.service';
import { WidgetContext } from '@home/models/widget-component.models';
import { UtilsService } from '@core/services/utils.service';
import { ConfigurationModes, ConnectorType, GatewayAttributeData, GatewayConnector, GatewayLogLevel, ReportStrategyDefaultValue } from './gateway-widget.models';
import { MatDialog } from '@angular/material/dialog';
import { ErrorStateMatcher } from '@angular/material/core';
import { LatestVersionConfigPipe } from '@home/components/widget/lib/gateway/pipes/latest-version-config.pipe';
import * as i0 from "@angular/core";
export declare class ForceErrorStateMatcher implements ErrorStateMatcher {
    isErrorState(control: FormControl | null): boolean;
}
export declare class GatewayConnectorComponent extends PageComponent implements AfterViewInit, OnDestroy {
    protected store: Store<AppState>;
    private fb;
    private translate;
    private attributeService;
    private dialogService;
    private dialog;
    private telemetryWsService;
    private zone;
    private utils;
    private isLatestVersionConfig;
    private cd;
    ctx: WidgetContext;
    device: EntityId;
    nameInput: ElementRef;
    sort: MatSort;
    readonly ConnectorType: typeof ConnectorType;
    readonly allowBasicConfig: Set<ConnectorType>;
    readonly gatewayLogLevel: GatewayLogLevel[];
    readonly displayedColumns: string[];
    readonly GatewayConnectorTypesTranslatesMap: Map<ConnectorType, string>;
    readonly ConnectorConfigurationModes: typeof ConfigurationModes;
    readonly ReportStrategyDefaultValue: typeof ReportStrategyDefaultValue;
    pageLink: PageLink;
    dataSource: MatTableDataSource<GatewayAttributeData>;
    connectorForm: FormGroup;
    activeConnectors: Array<string>;
    mode: ConfigurationModes;
    initialConnector: GatewayConnector;
    basicConfigInitSubject: Subject<void>;
    private gatewayVersion;
    private isGatewayActive;
    private inactiveConnectors;
    private attributeDataSource;
    private inactiveConnectorsDataSource;
    private serverDataSource;
    private activeData;
    private inactiveData;
    private sharedAttributeData;
    private basicConfigSub;
    private jsonConfigSub;
    private subscriptionOptions;
    private destroy$;
    private subscription;
    private attributeUpdateSubject;
    constructor(store: Store<AppState>, fb: FormBuilder, translate: TranslateService, attributeService: AttributeService, dialogService: DialogService, dialog: MatDialog, telemetryWsService: TelemetryWebsocketService, zone: NgZone, utils: UtilsService, isLatestVersionConfig: LatestVersionConfigPipe, cd: ChangeDetectorRef);
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    onSaveConnector(): void;
    private saveConnector;
    private getEntityAttributeTasks;
    private getSaveEntityAttributesTask;
    private removeConnectorFromList;
    private getUpdatedConnectorData;
    private updateData;
    isConnectorSynced(attribute: GatewayAttributeData): boolean;
    private hasSameConfig;
    private combineData;
    private clearOutConnectorForm;
    selectConnector($event: Event, attribute: GatewayAttributeData): void;
    isSameConnector(attribute: GatewayAttributeData): boolean;
    showToast(message: string): void;
    returnType(attribute: GatewayAttributeData): string;
    deleteConnector(attribute: GatewayAttributeData, $event: Event): void;
    connectorLogs(attribute: GatewayAttributeData, $event: Event): void;
    connectorRpc(attribute: GatewayAttributeData, $event: Event): void;
    onEnableConnector(attribute: GatewayAttributeData): void;
    getErrorsCount(attribute: GatewayAttributeData): string;
    onAddConnector(event?: Event): void;
    private addConnector;
    private setInitialConnectorValues;
    private openAddConnectorDialog;
    uniqNameRequired(): ValidatorFn;
    private initDataSources;
    private initConnectorForm;
    private getSortingDataAccessor;
    private loadConnectors;
    private loadGatewayState;
    private parseConnectors;
    private observeModeChange;
    private observeAttributeChange;
    private updateActiveConnectorKeys;
    private executeAttributeUpdates;
    private getAttributeExecutionTasks;
    private onDataUpdateError;
    private onErrorsUpdated;
    private onDataUpdated;
    private getGatewayStatus;
    private generateSubscription;
    private createBasicConfigWatcher;
    private createJsonConfigWatcher;
    private confirmConnectorChange;
    private setFormValue;
    private updateConnector;
    private updateBasicConfigConnector;
    private patchBasicConfigConnector;
    private toggleReportStrategy;
    private setClientData;
    static ɵfac: i0.ɵɵFactoryDeclaration<GatewayConnectorComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<GatewayConnectorComponent, "tb-gateway-connector", never, { "ctx": "ctx"; "device": "device"; }, {}, never, never, false, never>;
}

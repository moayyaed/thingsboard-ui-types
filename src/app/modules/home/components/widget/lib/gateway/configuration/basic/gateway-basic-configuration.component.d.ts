import { ChangeDetectorRef, EventEmitter, OnDestroy } from '@angular/core';
import { ControlValueAccessor, FormArray, FormBuilder, FormControl, FormGroup, ValidationErrors, Validators } from '@angular/forms';
import { EntityId } from '@shared/models/id/entity-id';
import { MatDialog } from '@angular/material/dialog';
import { DeviceService } from '@core/http/device.service';
import { DeviceCredentials } from '@shared/models/device.models';
import { GatewayLogLevel, LocalLogsConfigs, LogSavingPeriod, SecurityTypes, StorageTypes } from '../../gateway-widget.models';
import { GatewayConfigCommand, GatewayConfigValue } from '@home/components/widget/lib/gateway/configuration/models/gateway-configuration.models';
import * as i0 from "@angular/core";
export declare class GatewayBasicConfigurationComponent implements OnDestroy, ControlValueAccessor, Validators {
    private fb;
    private deviceService;
    private cd;
    private dialog;
    device: EntityId;
    dialogMode: boolean;
    initialCredentialsUpdated: EventEmitter<DeviceCredentials>;
    StorageTypes: typeof StorageTypes;
    storageTypes: StorageTypes[];
    storageTypesTranslationMap: Map<StorageTypes, string>;
    logSavingPeriods: Map<LogSavingPeriod, string>;
    localLogsConfigs: LocalLogsConfigs[];
    localLogsConfigTranslateMap: Map<LocalLogsConfigs, string>;
    securityTypes: Map<SecurityTypes, string>;
    gatewayLogLevel: GatewayLogLevel[];
    logSelector: FormControl;
    basicFormGroup: FormGroup;
    private onChange;
    private onTouched;
    private destroy$;
    constructor(fb: FormBuilder, deviceService: DeviceService, cd: ChangeDetectorRef, dialog: MatDialog);
    ngOnDestroy(): void;
    registerOnChange(fn: (value: GatewayConfigValue) => void): void;
    registerOnTouched(fn: () => void): void;
    writeValue(basicConfig: GatewayConfigValue): void;
    validate(): ValidationErrors | null;
    private atLeastOneRequired;
    private toggleRpcFields;
    private addLocalLogConfig;
    getLogFormGroup(value: string): FormGroup;
    commandFormArray(): FormArray;
    removeCommandControl(index: number, event: PointerEvent): void;
    private removeAllSecurityValidators;
    private removeAllStorageValidators;
    private openConfigurationConfirmDialog;
    addCommand(command?: GatewayConfigCommand, emitEvent?: boolean): void;
    private initBasicFormGroup;
    private initThingsboardFormGroup;
    private initStorageFormGroup;
    private initGrpcFormGroup;
    private initLogsFormGroup;
    private initCheckingDeviceActivityFormGroup;
    private initSecurityFormGroup;
    private observeFormChanges;
    private observeSecurityPasswordChanges;
    private observeRemoteConfigurationChanges;
    private observeDeviceActivityChanges;
    private observeSecurityTypeChanges;
    private observeStorageTypeChanges;
    private addAccessTokenValidators;
    private addTlsPrivateKeyValidators;
    private addTlsAccessTokenValidators;
    private addMemoryStorageValidators;
    private addFileStorageValidators;
    private addSqliteStorageValidators;
    private checkAndFetchCredentials;
    private updateSecurityType;
    private updateCredentials;
    private updateAccessTokenCredentials;
    private updateMqttBasicCredentials;
    static ɵfac: i0.ɵɵFactoryDeclaration<GatewayBasicConfigurationComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<GatewayBasicConfigurationComponent, "tb-gateway-basic-configuration", never, { "device": { "alias": "device"; "required": false; }; "dialogMode": { "alias": "dialogMode"; "required": false; }; }, { "initialCredentialsUpdated": "initialCredentialsUpdated"; }, never, never, true, never>;
}

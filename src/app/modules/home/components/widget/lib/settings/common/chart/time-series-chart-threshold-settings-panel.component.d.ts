import { EventEmitter, OnInit } from '@angular/core';
import { TbPopoverComponent } from '@shared/components/popover.component';
import { UntypedFormBuilder, UntypedFormGroup } from '@angular/forms';
import { TimeSeriesChartShape, TimeSeriesChartThreshold, TimeSeriesChartYAxisId } from '@home/components/widget/lib/chart/time-series-chart.models';
import { WidgetConfig } from '@shared/models/widget.models';
import * as i0 from "@angular/core";
export declare class TimeSeriesChartThresholdSettingsPanelComponent implements OnInit {
    private fb;
    timeSeriesLineTypes: import("@home/components/widget/lib/chart/time-series-chart.models").TimeSeriesChartLineType[];
    timeSeriesLineTypeTranslations: Map<import("@home/components/widget/lib/chart/time-series-chart.models").TimeSeriesChartLineType, string>;
    timeSeriesChartShapes: TimeSeriesChartShape[];
    timeSeriesChartShapeTranslations: Map<TimeSeriesChartShape, string>;
    timeSeriesThresholdLabelPositions: import("@home/components/widget/lib/chart/time-series-chart.models").ThresholdLabelPosition[];
    timeSeriesThresholdLabelPositionTranslations: Map<import("@home/components/widget/lib/chart/time-series-chart.models").ThresholdLabelPosition, string>;
    labelPreviewFn: any;
    thresholdSettings: Partial<TimeSeriesChartThreshold>;
    widgetConfig: WidgetConfig;
    yAxisIds: TimeSeriesChartYAxisId[];
    popover: TbPopoverComponent<TimeSeriesChartThresholdSettingsPanelComponent>;
    thresholdSettingsApplied: EventEmitter<Partial<TimeSeriesChartThreshold>>;
    thresholdSettingsFormGroup: UntypedFormGroup;
    constructor(fb: UntypedFormBuilder);
    ngOnInit(): void;
    cancel(): void;
    applyThresholdSettings(): void;
    private updateValidators;
    private _labelPreviewFn;
    static ɵfac: i0.ɵɵFactoryDeclaration<TimeSeriesChartThresholdSettingsPanelComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<TimeSeriesChartThresholdSettingsPanelComponent, "tb-time-series-chart-threshold-settings-panel", never, { "thresholdSettings": "thresholdSettings"; "widgetConfig": "widgetConfig"; "yAxisIds": "yAxisIds"; "popover": "popover"; }, { "thresholdSettingsApplied": "thresholdSettingsApplied"; }, never, never, false, never>;
}

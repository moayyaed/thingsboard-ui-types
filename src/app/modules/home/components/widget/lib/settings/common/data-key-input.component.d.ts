import { ChangeDetectorRef, ElementRef, EventEmitter, OnChanges, OnInit, SimpleChanges } from '@angular/core';
import { ControlValueAccessor, UntypedFormBuilder, UntypedFormControl } from '@angular/forms';
import { DataKeyType } from '@shared/models/telemetry/telemetry.models';
import { MatAutocomplete, MatAutocompleteTrigger } from '@angular/material/autocomplete';
import { MatChipGrid, MatChipInputEvent } from '@angular/material/chips';
import { DataKey, DatasourceType, widgetType } from '@shared/models/widget.models';
import { Observable } from 'rxjs';
import { MatDialog } from '@angular/material/dialog';
import { TranslateService } from '@ngx-translate/core';
import { TruncatePipe } from '@shared/pipe/truncate.pipe';
import { UtilsService } from '@core/services/utils.service';
import { DataKeysCallbacks } from '@home/components/widget/config/data-keys.component.models';
import { IAliasController } from '@core/api/widget-api.models';
import * as i0 from "@angular/core";
export declare class DataKeyInputComponent implements ControlValueAccessor, OnInit, OnChanges {
    private fb;
    private dialog;
    private cd;
    translate: TranslateService;
    truncate: TruncatePipe;
    private utils;
    hostClass: string;
    DataKeyType: typeof DataKeyType;
    separatorKeysCodes: number[];
    keyInput: ElementRef<HTMLInputElement>;
    matAutocomplete: MatAutocomplete;
    autocomplete: MatAutocompleteTrigger;
    chipList: MatChipGrid;
    disabled: boolean;
    required: boolean;
    requiredText: string;
    isLatestDataKeys: boolean;
    editable: boolean;
    removable: boolean;
    datasourceType: DatasourceType;
    entityAliasId: string;
    entityAlias: string;
    deviceId: string;
    widgetType: widgetType;
    callbacks: DataKeysCallbacks;
    aliasController: IAliasController;
    dataKeyType: DataKeyType;
    dataKeyTypes: DataKeyType[];
    generateKey: (key: DataKey) => DataKey;
    keyEdit: EventEmitter<DataKey>;
    keysFormControl: UntypedFormControl;
    keyFormControl: UntypedFormControl;
    modelValue: DataKey;
    filteredKeys: Observable<Array<DataKey>>;
    keySearchText: string;
    alarmKeys: Array<DataKey>;
    functionTypeKeys: Array<DataKey>;
    allowedDataKeyTypes: DataKeyType[];
    private latestKeySearchTextResult;
    private keyFetchObservable$;
    get isEntityDatasource(): boolean;
    private propagateChange;
    constructor(fb: UntypedFormBuilder, dialog: MatDialog, cd: ChangeDetectorRef, translate: TranslateService, truncate: TruncatePipe, utils: UtilsService);
    ngOnInit(): void;
    private updateAllowedDataKeys;
    private reset;
    ngOnChanges(changes: SimpleChanges): void;
    registerOnChange(fn: any): void;
    registerOnTouched(fn: any): void;
    setDisabledState(isDisabled: boolean): void;
    writeValue(value: DataKey): void;
    dataKeyHasAggregation(): boolean;
    dataKeyHasPostprocessing(): boolean;
    displayKeyFn(key?: DataKey): string | undefined;
    createKey(name: string, dataKeyType?: DataKeyType): void;
    addKey(event: MatChipInputEvent): void;
    editKey(): void;
    removeKey(): void;
    textIsNotEmpty(text: string): boolean;
    clearKeyChip(value?: string, focus?: boolean): void;
    onKeyInputFocus(): void;
    private fetchKeys;
    private getKeys;
    private createDataKeyFilter;
    private addKeyFromChipValue;
    private clearKeySearchCache;
    private updateModel;
    static ɵfac: i0.ɵɵFactoryDeclaration<DataKeyInputComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DataKeyInputComponent, "tb-data-key-input", never, { "disabled": "disabled"; "required": "required"; "requiredText": "requiredText"; "isLatestDataKeys": "isLatestDataKeys"; "editable": "editable"; "removable": "removable"; "datasourceType": "datasourceType"; "entityAliasId": "entityAliasId"; "entityAlias": "entityAlias"; "deviceId": "deviceId"; "widgetType": "widgetType"; "callbacks": "callbacks"; "aliasController": "aliasController"; "dataKeyType": "dataKeyType"; "dataKeyTypes": "dataKeyTypes"; "generateKey": "generateKey"; }, { "keyEdit": "keyEdit"; }, never, never, false, never>;
}

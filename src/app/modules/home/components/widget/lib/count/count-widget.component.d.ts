import { AfterViewInit, ChangeDetectorRef, ElementRef, OnDestroy, OnInit, Renderer2, TemplateRef } from '@angular/core';
import { WidgetContext } from '@home/models/widget-component.models';
import { ColorProcessor, ComponentStyle } from '@shared/models/widget-settings.models';
import { CountCardLayout, CountWidgetSettings } from '@home/components/widget/lib/count/count-widget.models';
import { UtilsService } from '@core/services/utils.service';
import * as i0 from "@angular/core";
export declare class CountWidgetComponent implements OnInit, AfterViewInit, OnDestroy {
    private renderer;
    private utils;
    private cd;
    countPanel: ElementRef<HTMLElement>;
    countPanelContent: ElementRef<HTMLElement>;
    settings: CountWidgetSettings;
    countCardLayout: typeof CountCardLayout;
    ctx: WidgetContext;
    widgetTitlePanel: TemplateRef<any>;
    alarmElseEntity: boolean;
    layout: CountCardLayout;
    showLabel: boolean;
    label: string;
    labelStyle: ComponentStyle;
    labelColor: ColorProcessor;
    showIcon: boolean;
    icon: string;
    iconStyle: ComponentStyle;
    iconColor: ColorProcessor;
    showIconBackground: boolean;
    iconBackgroundSize: string;
    iconBackgroundStyle: ComponentStyle;
    iconBackgroundColor: ColorProcessor;
    valueText: string;
    valueStyle: ComponentStyle;
    valueColor: ColorProcessor;
    showChevron: boolean;
    chevronStyle: ComponentStyle;
    hasCardClickAction: boolean;
    private panelResize$;
    private hasTitle;
    constructor(renderer: Renderer2, utils: UtilsService, cd: ChangeDetectorRef);
    ngOnInit(): void;
    ngAfterViewInit(): void;
    ngOnDestroy(): void;
    onInit(): void;
    onDataUpdated(): void;
    cardClick($event: Event): void;
    private onResize;
    static ɵfac: i0.ɵɵFactoryDeclaration<CountWidgetComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<CountWidgetComponent, "tb-count-widget", never, { "ctx": { "alias": "ctx"; "required": false; }; "widgetTitlePanel": { "alias": "widgetTitlePanel"; "required": false; }; "alarmElseEntity": { "alias": "alarmElseEntity"; "required": false; }; }, {}, never, never, false, never>;
}

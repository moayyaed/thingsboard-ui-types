import { ChangeDetectorRef, NgZone, OnDestroy, OnInit, TemplateRef, ViewContainerRef } from '@angular/core';
import { WidgetContext } from '@home/models/widget-component.models';
import { ComponentStyle } from '@shared/models/widget-settings.models';
import { Observable } from 'rxjs';
import { ImagePipe } from '@shared/pipe/image.pipe';
import { DomSanitizer } from '@angular/platform-browser';
import { UnreadNotificationWidgetSettings } from '@home/components/widget/lib/cards/unread-notification-widget.models';
import { Notification, NotificationRequest } from '@shared/models/notification.models';
import { NotificationWebsocketService } from '@core/ws/notification-websocket.service';
import { Router } from '@angular/router';
import { Overlay } from '@angular/cdk/overlay';
import { Store } from '@ngrx/store';
import { AppState } from '@core/core.state';
import * as i0 from "@angular/core";
export declare class UnreadNotificationWidgetComponent implements OnInit, OnDestroy {
    private store;
    private imagePipe;
    private notificationWsService;
    private sanitizer;
    private router;
    private zone;
    private overlay;
    private viewContainerRef;
    private cd;
    settings: UnreadNotificationWidgetSettings;
    ctx: WidgetContext;
    widgetTitlePanel: TemplateRef<any>;
    showCounter: boolean;
    counterValueStyle: ComponentStyle;
    counterBackground: string;
    notifications: Notification[];
    loadNotification: boolean;
    backgroundStyle$: Observable<ComponentStyle>;
    overlayStyle: ComponentStyle;
    padding: string;
    private counterValue;
    count$: Observable<string | number>;
    private notificationTypes;
    private notificationSubscriber;
    private notificationCountSubscriber;
    private notification;
    private contentResize$;
    private defaultDashboardFullscreen;
    private viewAllAction;
    private filterAction;
    private markAsReadAction;
    constructor(store: Store<AppState>, imagePipe: ImagePipe, notificationWsService: NotificationWebsocketService, sanitizer: DomSanitizer, router: Router, zone: NgZone, overlay: Overlay, viewContainerRef: ViewContainerRef, cd: ChangeDetectorRef);
    ngOnInit(): void;
    ngOnDestroy(): void;
    private initSubscription;
    private unsubscribeSubscription;
    onInit(): void;
    markAsRead(id: string): void;
    markAsAllRead($event: Event): void;
    viewAll($event: Event): void;
    trackById(index: number, item: NotificationRequest): string;
    private editNotificationTypeFilter;
    static ɵfac: i0.ɵɵFactoryDeclaration<UnreadNotificationWidgetComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<UnreadNotificationWidgetComponent, "tb-unread-notification-widget", never, { "ctx": { "alias": "ctx"; "required": false; }; "widgetTitlePanel": { "alias": "widgetTitlePanel"; "required": false; }; }, {}, never, never, false, never>;
}

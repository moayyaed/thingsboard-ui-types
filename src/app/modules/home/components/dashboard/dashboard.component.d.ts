import { AfterViewInit, DoCheck, IterableDiffers, KeyValueDiffers, NgZone, OnChanges, OnDestroy, OnInit, SimpleChanges } from '@angular/core';
import { Store } from '@ngrx/store';
import { AppState } from '@core/core.state';
import { PageComponent } from '@shared/components/page.component';
import { AuthUser } from '@shared/models/user.model';
import { Timewindow } from '@shared/models/time/time.models';
import { TimeService } from '@core/services/time.service';
import { GridsterComponent, GridsterConfig, GridType } from 'angular-gridster2';
import { DashboardCallbacks, DashboardWidget, IDashboardComponent } from '../../models/dashboard-component.models';
import { Subject, Subscription } from 'rxjs';
import { WidgetLayouts } from '@shared/models/dashboard.models';
import { BreakpointObserver } from '@angular/cdk/layout';
import { IAliasController, IStateController } from '@app/core/api/widget-api.models';
import { Widget, WidgetPosition } from '@app/shared/models/widget.models';
import { MatMenuTrigger } from '@angular/material/menu';
import { SafeStyle } from '@angular/platform-browser';
import { UtilsService } from '@core/services/utils.service';
import { WidgetComponentAction } from '@home/components/widget/widget-container.component';
import { TbPopoverComponent } from '@shared/components/popover.component';
import { displayGrids } from 'angular-gridster2/lib/gridsterConfig.interface';
import { TbContextMenuEvent } from '@shared/models/jquery-event.models';
import * as i0 from "@angular/core";
export declare class DashboardComponent extends PageComponent implements IDashboardComponent, DoCheck, OnInit, OnDestroy, AfterViewInit, OnChanges {
    protected store: Store<AppState>;
    utils: UtilsService;
    private timeService;
    private breakpointObserver;
    private differs;
    private kvDiffers;
    private ngZone;
    authUser: AuthUser;
    widgets: Iterable<Widget>;
    widgetLayouts: WidgetLayouts;
    callbacks: DashboardCallbacks;
    aliasController: IAliasController;
    stateController: IStateController;
    columns: number;
    setGridSize: boolean;
    margin: number;
    outerMargin: boolean;
    displayGrid: displayGrids;
    gridType: GridType;
    centerVertical: boolean;
    centerHorizontal: boolean;
    isEdit: boolean;
    isEditingWidget: boolean;
    isPreview: boolean;
    autofillHeight: boolean;
    mobileAutofillHeight: boolean;
    mobileRowHeight: number;
    isMobile: boolean;
    isMobileDisabled: boolean;
    isEditActionEnabled: boolean;
    isExportActionEnabled: boolean;
    isRemoveActionEnabled: boolean;
    disableWidgetInteraction: boolean;
    dashboardStyle: {
        [klass: string]: any;
    };
    backgroundImage: SafeStyle | string;
    dashboardClass: string;
    ignoreLoading: boolean;
    dashboardTimewindow: Timewindow;
    parentDashboard?: IDashboardComponent;
    popoverComponent?: TbPopoverComponent;
    dashboardTimewindowChangedSubject: Subject<Timewindow>;
    dashboardTimewindowChanged: import("rxjs").Observable<Timewindow>;
    originalDashboardTimewindow: Timewindow;
    gridsterOpts: GridsterConfig;
    isWidgetExpanded: boolean;
    isMobileSize: boolean;
    gridster: GridsterComponent;
    dashboardMenuTrigger: MatMenuTrigger;
    dashboardMenuPosition: {
        x: string;
        y: string;
    };
    dashboardContextMenuEvent: TbContextMenuEvent;
    widgetMenuTrigger: MatMenuTrigger;
    widgetMenuPosition: {
        x: string;
        y: string;
    };
    widgetContextMenuEvent: TbContextMenuEvent;
    dashboardWidgets: any;
    breakpointObserverSubscription: Subscription;
    private optionsChangeNotificationsPaused;
    private gridsterResize$;
    constructor(store: Store<AppState>, utils: UtilsService, timeService: TimeService, breakpointObserver: BreakpointObserver, differs: IterableDiffers, kvDiffers: KeyValueDiffers, ngZone: NgZone);
    ngOnInit(): void;
    ngOnDestroy(): void;
    ngDoCheck(): void;
    ngOnChanges(changes: SimpleChanges): void;
    private updateWidgets;
    private updateWidgetLayouts;
    ngAfterViewInit(): void;
    onUpdateTimewindow(startTimeMs: number, endTimeMs: number, interval?: number, persist?: boolean): void;
    onResetTimewindow(): void;
    isAutofillHeight(): boolean;
    onDashboardMouseDown($event: MouseEvent): void;
    openDashboardContextMenu($event: TbContextMenuEvent): void;
    private openWidgetContextMenu;
    onWidgetFullscreenChanged(expanded: boolean): void;
    onWidgetComponentAction(action: WidgetComponentAction, widget: DashboardWidget): void;
    private widgetMouseDown;
    private widgetClicked;
    private editWidget;
    private replaceReferenceWithWidgetCopy;
    private exportWidget;
    private removeWidget;
    highlightWidget(widgetId: string, delay?: number): void;
    selectWidget(widgetId: string, delay?: number): void;
    getSelectedWidget(): Widget;
    getEventGridPosition(event: TbContextMenuEvent | KeyboardEvent): WidgetPosition;
    resetHighlight(): void;
    private scrollToWidget;
    private onGridsterParentResize;
    private updateGridOpts;
    private updateColumnOpts;
    private updateEditingOpts;
    private updateDisplayGridOpts;
    notifyGridsterOptionsChanged(): void;
    pauseChangeNotifications(): void;
    resumeChangeNotifications(): void;
    notifyLayoutUpdated(): void;
    private detectRowSize;
    private checkIsMobileSize;
    static ɵfac: i0.ɵɵFactoryDeclaration<DashboardComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<DashboardComponent, "tb-dashboard", never, { "widgets": { "alias": "widgets"; "required": false; }; "widgetLayouts": { "alias": "widgetLayouts"; "required": false; }; "callbacks": { "alias": "callbacks"; "required": false; }; "aliasController": { "alias": "aliasController"; "required": false; }; "stateController": { "alias": "stateController"; "required": false; }; "columns": { "alias": "columns"; "required": false; }; "setGridSize": { "alias": "setGridSize"; "required": false; }; "margin": { "alias": "margin"; "required": false; }; "outerMargin": { "alias": "outerMargin"; "required": false; }; "displayGrid": { "alias": "displayGrid"; "required": false; }; "gridType": { "alias": "gridType"; "required": false; }; "centerVertical": { "alias": "centerVertical"; "required": false; }; "centerHorizontal": { "alias": "centerHorizontal"; "required": false; }; "isEdit": { "alias": "isEdit"; "required": false; }; "isEditingWidget": { "alias": "isEditingWidget"; "required": false; }; "isPreview": { "alias": "isPreview"; "required": false; }; "autofillHeight": { "alias": "autofillHeight"; "required": false; }; "mobileAutofillHeight": { "alias": "mobileAutofillHeight"; "required": false; }; "mobileRowHeight": { "alias": "mobileRowHeight"; "required": false; }; "isMobile": { "alias": "isMobile"; "required": false; }; "isMobileDisabled": { "alias": "isMobileDisabled"; "required": false; }; "isEditActionEnabled": { "alias": "isEditActionEnabled"; "required": false; }; "isExportActionEnabled": { "alias": "isExportActionEnabled"; "required": false; }; "isRemoveActionEnabled": { "alias": "isRemoveActionEnabled"; "required": false; }; "disableWidgetInteraction": { "alias": "disableWidgetInteraction"; "required": false; }; "dashboardStyle": { "alias": "dashboardStyle"; "required": false; }; "backgroundImage": { "alias": "backgroundImage"; "required": false; }; "dashboardClass": { "alias": "dashboardClass"; "required": false; }; "ignoreLoading": { "alias": "ignoreLoading"; "required": false; }; "dashboardTimewindow": { "alias": "dashboardTimewindow"; "required": false; }; "parentDashboard": { "alias": "parentDashboard"; "required": false; }; "popoverComponent": { "alias": "popoverComponent"; "required": false; }; }, {}, never, never, false, never>;
}

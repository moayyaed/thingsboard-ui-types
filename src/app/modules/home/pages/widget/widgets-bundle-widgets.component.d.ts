import { ChangeDetectorRef, OnInit } from '@angular/core';
import { PageComponent } from '@shared/components/page.component';
import { AuthUser } from '@shared/models/user.model';
import { Store } from '@ngrx/store';
import { AppState } from '@core/core.state';
import { ActivatedRoute, Router } from '@angular/router';
import { WidgetsBundle } from '@shared/models/widgets-bundle.model';
import { WidgetTypeInfo } from '@shared/models/widget.models';
import { CdkDragDrop } from '@angular/cdk/drag-drop';
import { ImportExportService } from '@home/components/import-export/import-export.service';
import { WidgetService } from '@core/http/widget.service';
import { DomSanitizer, SafeUrl } from '@angular/platform-browser';
import { FormControl } from '@angular/forms';
import { MatDialog } from '@angular/material/dialog';
import * as i0 from "@angular/core";
type WidgetTypeBundle = WithOptional<WidgetTypeInfo, 'widgetType'>;
export declare class WidgetsBundleWidgetsComponent extends PageComponent implements OnInit {
    protected store: Store<AppState>;
    private router;
    private route;
    private widgetsService;
    private importExport;
    private sanitizer;
    private cd;
    private dialog;
    authUser: AuthUser;
    isReadOnly: boolean;
    editMode: boolean;
    addMode: boolean;
    isDirty: boolean;
    widgetsBundle: WidgetsBundle;
    widgets: Array<WidgetTypeBundle>;
    excludeWidgetTypeIds: Array<string>;
    addWidgetFormControl: FormControl<any>;
    constructor(store: Store<AppState>, router: Router, route: ActivatedRoute, widgetsService: WidgetService, importExport: ImportExportService, sanitizer: DomSanitizer, cd: ChangeDetectorRef, dialog: MatDialog);
    ngOnInit(): void;
    getPreviewImage(imageUrl: string | null): SafeUrl | string;
    trackByWidget(index: number, widget: WidgetTypeBundle): any;
    widgetDrop(event: CdkDragDrop<string[]>): void;
    addWidgetMode(): void;
    cancelAddWidgetMode(): void;
    private addWidget;
    openWidgetEditor($event: Event, widgetType: WidgetTypeBundle): void;
    exportWidgetType($event: Event, widgetType: WidgetTypeBundle): void;
    removeWidgetType($event: Event, widgetType: WidgetTypeBundle): void;
    goBack(): void;
    exportWidgetsBundle(): void;
    edit(): void;
    cancel(): void;
    save(): void;
    addWidgetType($event: Event): void;
    importWidgetType(): void;
    static ɵfac: i0.ɵɵFactoryDeclaration<WidgetsBundleWidgetsComponent, never>;
    static ɵcmp: i0.ɵɵComponentDeclaration<WidgetsBundleWidgetsComponent, "tb-widgets-bundle-widget", never, {}, {}, never, never, false, never>;
}
export {};
